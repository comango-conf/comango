#!/usr/bin/env bash

if [ $(whoami) == "root" ]; then
  read -p "Comango should not be run as root. Proceed? (y/n) " yn
  if [ ! "$yn" == "y" ]; then
    exit 0
  fi
  echo "continuing as root"
fi

#------VARIABLES-------#

export COMANGO_DIR="$HOME/.comango"
export REPOS_DIR="$COMANGO_DIR/repos"
export BUILD_DIR="$COMANGO_DIR/build"
export LOG_DIR="$COMANGO_DIR/log"

export ENV_FILE="$HOME/.comangoenv"
export CONFIG_FILE="$COMANGO_DIR/comango.conf"
export PREVIOUS_PROPAGATION="$COMANGO_DIR/previous_propagation"
export CURRENT_BUILD="$COMANGO_DIR/current_build"
export SED_FILE="$COMANGO_DIR/sed"

if [ $TERM ]; then
    export red="$(tput setaf 1)"
    export green="$(tput setaf 2)"
    export yellow="$(tput setaf 3)"
    export blue="$(tput setaf 4)"
    export cyan="$(tput setaf 6)"
    export reset="$(tput sgr0)"
fi

# echo "${cyan}COMANGO${reset}"


eval "$(grep -v '\[\|#' $CONFIG_FILE)"

test -z $git_url     && echo "git_url not set"     && exit 1
test -z $base_repo   && echo "base_repo not set"   && exit 1
test -z $repo_prefix && echo "repo_prefix not set" && exit 1
test -z $package_manager && echo "package_manager not set" && exit 1 

mkdir -p $REPOS_DIR $BUILD_DIR

#------FUNCTIONS-------#

# checks if the system has an internet connection and exists if not
function _check_internet() {
  wget -q --spider http://google.com

  if [ "$?" != "0" ]; then
    echo "${red}no internet connection${reset}"
    exit 1
  fi
}

function setup() {
  _check_internet
  _setup_repo $base_repo
}

function _setup_repo() {
  # remove repro prefix
  local local_name=$(echo $1 | sed -re "s/($repo_prefix)(.*)/\2/")
  local repo_dir=$REPOS_DIR/$local_name
  local indent="${2:-0}"

  # clone repo
  if [ -d $repo_dir ]; then
    printf "%*s%s\n" $indent '' "${yellow}$local_name${reset}"
  else
    printf "%*s%s\n" $indent '' "${cyan}cloning $local_name...${reset}"
    git clone -q "$git_url/${1}.git" $repo_dir 1> /dev/null
  fi

  # check dependencies and clone them
  if [ -e $repo_dir/.conf/requires ]; then
    while read p; do
      _setup_repo $repo_prefix$p $((indent+2))
    done < $repo_dir/.conf/requires
  fi


}

# checks remote for updates
function sync() {
  _check_internet

  echo "${blue}fetching remote...${reset}"
  for repo_dir in $REPOS_DIR/*; do
    _sync_repo $repo_dir
  done
}

function _sync_repo() {
  local local_name=$(basename -a $1)

  cd $1

  # check if remote has changes
  git fetch -q origin
  changes=$(git log HEAD..origin/main --oneline | cat)
  if [ -n "$changes" ]; then
    printf "%-30s %s\n" "${yellow}$local_name:" "pulling...${reset}"
    git pull -q
  else
    printf "%-30s %s\n" "${cyan}$local_name:"   "up to date${reset}"
  fi

}

# upgrade remote if local changes have been made
function upgrade() {

  # parse args
  while [[ $# -gt 0 ]]; do
    key="$1"
    case $key in
      -l|--local)
      LOCAL=YES
      shift
      ;;
      -h|--home-only)
      HOME_ONLY=YES
      shift
      ;;       
      *)
        echo "Unknown argument $key"
        exit 1
    esac
  done

  # update remote unless local is set
  if [ -z $LOCAL ]; then
    _check_internet
    echo "${blue}updating remote...${reset}"
    for repo_dir in $REPOS_DIR/*; do
      _update_repo $repo_dir
    done
  fi

  echo ""
  _build
  _delete_removed_files
  echo ""
  _propagate
}

function _update_repo() {
  local local_name=$(basename -a $1)

  cd $1

  # check if local changes exist
  if [ -n "$(git status --porcelain)" ]; then
    printf "%-30s %s\n" "${yellow}$local_name:" "pushing changes...${reset}"
    git add .
    git commit -qm "auto update"
    git push -q
  else
    printf "%-30s %s\n" "${cyan}$local_name:"   "up to date${reset}"
  fi
}

# create repository
function create() {
  cd $REPOS_DIR
  git init $1
  cd $1
  gh repo create "$repo_prefix$1" --confirm --public
  git checkout -b main
  touch .gitignore
  echo "This repository is managed by comango." > README.md
  mkdir .conf
  touch .conf/requires
  touch .conf/packages
  git add .
  git commit -qm "init"
  git push -qu origin main
}

# copy all files and pipe them trough a template engine
function _build() {
  rm -rf $BUILD_DIR

  echo "${green}building...${reset}"

  mkdir -p $BUILD_DIR/home
  mkdir -p $BUILD_DIR/root
  mkdir -p $BUILD_DIR/root/etc/nixos

  for repo_dir in $REPOS_DIR/*; do
    # copy files if repo has dir
    test -d $repo_dir/home && cp -r $repo_dir/home $BUILD_DIR/

    if [[ -z $HOME_ONLY ]]; then
      # check if this is a nix system for root files
      if [[ $package_manager == "nix"  ]]; then	
        test -d $repo_dir/nix && cp -r $repo_dir/nix/* $BUILD_DIR/root/etc/nixos
      else    
        test -d $repo_dir/root && cp -r $repo_dir/root $BUILD_DIR/
      fi
    fi
  done

  _replace_templates
  if [[ $package_manager == "portage" ]]; then
   _generate_portage_set
  fi

  # chown root files to root
  # test -d $BUILD_DIR/root && sudo chown -R root:root $BUILD_DIR/root

  (cd $BUILD_DIR &&
   find * -type "f,s" > $CURRENT_BUILD)
}

function _replace_templates() {
  echo "${green}collecting env variables...${reset}"
  # collect env variables in correct order
  test -f $ENV_FILE && source $ENV_FILE

  _collect_env $base_repo


  local files
  mapfile -t files <<<"$(find $BUILD_DIR -type "f,s")"

  # collect all env variables that are used somewhere
  local variables=""
  for file in "${files[@]}"; do
    variables+=$(cat "$file" | grep '<#{[^}]*}#>' -o | sed 's:<#{\([^}]*\)}#>:\1:g')
    variables+=" "
  done

  mapfile -t variables <<<"$(echo $variables | sed "s: :\n:g"| sort -u)"

  test -f $SED_FILE && rm $SED_FILE

  # check if all required env variables are satisfied
  for v in "${variables[@]}"; do
    if [ -z "${!v}" ]; then
      echo "${red}env variable $v is not set${reset}"
      exit 1
    fi
    printf "%-20s %s\n" $v ${!v}
    echo "s:<#{${v}}#>:${!v}:g" >> $SED_FILE

  done


  echo ""
  echo "${green}replacing templates...${reset}"
  echo ""
  # actually replace files
  for file in "${files[@]}"; do
    sed -i -f $SED_FILE "$file"
  done
}

# sources all env files and scripts in env.d
function _collect_env() {


  local repo_dir=$REPOS_DIR/$1

  # source basic env variables
  if [ -f $repo_dir/.conf/env ]; then
    source $repo_dir/.conf/env
  fi

  # source env.d scripts
  if [ -d $repo_dir/.conf/env.d ]; then
    for script in $repo_dir/.conf/env.d/*; do
      source $script
    done
  fi

  # call next dependency in tree
  if [ -f $repo_dir/.conf/requires ]; then
    while read p; do
      _collect_env $p
    done < $repo_dir/.conf/requires
  fi
}

# deletes files that where propagated previously but are missing in current build
function _delete_removed_files() {
  test -f $PREVIOUS_PROPAGATION || return 0

  echo "${yellow}checking for removed files...${reset}"

  removed=()

  while read -u 10 file; do
    # check if file exists in current build
    if ! grep -q "$file" "$CURRENT_BUILD"; then
      removed+=("$file")
    fi
  done 10< $PREVIOUS_PROPAGATION

  #check if anything to delete
  if [ -n "$removed" ]; then
    echo "${red}following files will be removed from the system${reset}"
    echo ""
    printf '%s\n' "${removed[@]}" | sed -E "s:(.*):${red}\1${reset}:"
    echo ""

    read -p "continue? (${red}y${reset}/${green}n${reset}) " yn
    if [ "$yn" == "y" ]; then
      readarray -t home_files <<<"$(printf '%s\n' "${removed[@]}" | grep "home/")"
      readarray -t root_files <<<"$(printf '%s\n' "${removed[@]}" | grep "root/")"

      #TODO: also remove empty directories
      for file in "${home_files[@]}"; do
        local full_path=$(echo "$file" | sed "s:home/:$HOME/:")
        echo "removing $full_path"
        test -f "$full_path" &&
          rm "$full_path"
      done

      for file in "${root_files[@]}"; do
        local full_path=$(echo "$file" | sed "s:root/:/:")
        echo "removing $full_path"
        test -f "$full_path" &&
          sudo rm "$full_path"
      done

    fi
  fi
}


# propagates files in build directory to their according directory
function _propagate() {
  # clean old propagation file
  rm -f $PREVIOUS_PROPAGATION

  echo "${green}distributing files...${reset}"

  _home_propagate
  _root_propagate
}


function _home_propagate() {
  test -d $BUILD_DIR/home || return 0

  echo "${cyan}propagating home${reset}"
  cd $BUILD_DIR
  # find all files in build dir
  local files
  mapfile -t files <<<"$(find home -type "f,s" | sed "s:home/::g")"

  cd home

  # for each file distribute
  for file in "${files[@]}"; do
    if [ -n "$(diff -qN "$file" "$HOME/$file")" ]; then
      echo "propagating $file"
      # TODO: more complex logic that checks for merge conflicts
      cp --parents "$file" $HOME
    fi

    # save to propagation file
    echo "home/$file" >> $PREVIOUS_PROPAGATION

  done
  echo ""
}


function _root_propagate() {
  test -d $BUILD_DIR/root || return 0

  echo "${yellow}propagating root${reset}"
  cd $BUILD_DIR
  # find all files in build dir
  local files
  mapfile -t files <<<"$(find root -type "f,s" | sed "s:root/::g")"

  cd root

  # for each file distribute
  for file in "${files[@]}"; do
    if [ -n "$(diff -qN "$file" "/$file")" ]; then
      echo "propagating $file"
      # TODO: more complex logic that checks for merge conflicts
      sudo cp --parents "$file" /
      sudo chown root:root "/$file"
    fi

    # save to propagation file
    echo "root/$file" >> $PREVIOUS_PROPAGATION

  done
  echo ""
}


function _generate_portage_set() {
  local sets_dir=$BUILD_DIR/root/etc/portage/sets/
  # create sets dir in build directory
  mkdir -p $sets_dir
  # insert base dependency
  echo -e "@comango-base\n\n# Config Dependencies" > $sets_dir/comango

  # collect all packages
  packages=""
  for repo_dir in $REPOS_DIR/*; do
    if [ -f $repo_dir/.conf/packages ]; then
      packages+=" $(cat $repo_dir/.conf/packages)"
    fi
  done

  # filter duplicate entries and append to comango set
  echo $packages | sed "s: :\n:g" | sort -u >> $sets_dir/comango

  # check if set has changes and abort if the user has to emerge these changes
  if [ -n "$(diff -qN $sets_dir/comango /etc/portage/sets/comango)" ]; then
    (cd $BUILD_DIR/root &&
     sudo cp --parents etc/portage/sets/comango /)

    echo "the comango set has package changes. please emerge before restarting upgrade"
    echo "emerge -avnuU @comango"
    exit 0
  fi
}

function hook() {
  hook=$1

  if [ -z $hook ]; then
    echo "${red}no hook type provided${reset}"
    exit 1;
  fi

  echo "Running ${hook} hook"

  files=$REPOS_DIR/*/.conf/hooks/*

  mkdir -p $LOG_DIR
  for script in $files; do
    hook_def=$(grep "#HOOKS INTO" $script)

    if [ -z "$hook_def" ]; then
      echo "${red}script ${script} missing #HOOKS INTO${reset}"
      exit 1;
    fi

    name=$(basename -s .sh $script)

    if [ -n "$(echo "$hook_def" | grep "$hook")" ]; then
      echo "${blue}running${reset} $script"
      $script &> "${LOG_DIR}/${name}.log"
    fi

  done
}

# removes all files from the system that are contained in the current build.
# DO NOT USE THIS UNLESS SURE NOTHING IMPORTANT FOR THE SYSTEM IS TRACKED
function wipe() {

  read -p "${red}CAREFUL. THIS WILL WIPE ALL FILES TRACKED IN THE CURRENT BUILD. CONTINUE? (y/n)${reset} " yn

  if [ "$yn" == "y" ]; then
    rm -f $CURRENT_BUILD
    touch $CURRENT_BUILD
    _delete_removed_files


    rm -rf $BUILD_DIR $REPOS_DIR $PREVIOUS_PROPAGATION $CURRENT_BUILD
  fi
}

function help() {
  echo "
   usage: comango <setup|hook|upgrade|sync|create>"
}

function config() {
  ed=${EDITOR:-vi}
  $ed $CONFIG_FILE
}


# helper function for exec script to change variables in the comango env file
function set_env_var() {
    key=$1
    value=$2

    test -f $ENV_FILE || touch $ENV_FILE

    if [ -n "$(sed "s:#.*::" $ENV_FILE | grep $key)" ]; then
        sed -i -E "s:$key=.*:$key=\"$value\":" $ENV_FILE
    else
        echo "$key=\"$value\"" >> $ENV_FILE
    fi
}
export -f set_env_var

# helper that provides all repo executables for bash completions
function get_execs() {
    local execs=

    for repo in $REPOS_DIR/*; do
        if [[ -f "$repo/.conf/exec" ]]; then
            execs+=" $(basename "$repo")"
        fi
    done

    echo $execs
}

if [ -n "$1" ] && [ -d "$REPOS_DIR/$1" ]; then
    if [ -e "$REPOS_DIR/$1/.conf/exec" ]; then
         exec="$REPOS_DIR/$1/.conf/exec"
         shift
        sh $exec "$@"
    else
        echo "$1 does not have an exec script"
    fi
else
    "$@"
fi
